#labels Featured
= GCMUtils features =
GCMUtils was created to make it easier to use GCM. It works in cooperation with the standard GCM classes, such as GCMRegistrar.

The main features are:
  * Registration id handling (both for registration and unregistration), that will automatically send a request to a server containing the registration id. Supports features such as exponential backoff.
  * Extended verification of project with {{{GCMUtils.checkExtended(context)}}}. Verifies the GCM service created in the project.
  * Uses the file _gcmutils.properties_ to make it easy to provide configuration options, such as _receiver-url_ and _sender-id_.
  * An alternative base intent service _GCMUtilsBaseIntentService_, that includes a few helper methods, such as automatic registrationId handling.

----

1. [#1._Setup Setup]<br/>
2. [#2._GCMUtils_class GCMUtils class]

----

==1. Setup==
Read the [http://developer.android.com/google/gcm/gs.html GCM: Getting Started] guide. GCMUtils requires the same initial setup, with generation of the sender id (project id) and API key.

See the [http://code.google.com/p/gcmutils/wiki/ProjectSetup project setup page] for more info on how to include GCMUtils in your project.


== 2. GCMUtils class ==
The most important class is GCMUtils. It provides helper methods for the Android client. This section will provide more detailed information about these features, how they work and when they should be used.

=== 2.1 Extended check ===
The standard GCMRegistrar class provides two very useful methods that are used to verify that your project setup is correct. These are:
{{{
GCMRegistrar.checkDevice(this);
GCMRegistrar.checkManifest(this);
}}}
While these methods are very useful, they do not verify your service implementation. GCMUtils extends this, by offering the GCMUtils.checkExtended. It is useful during development and will first start by calling the GCMRegistrar.checkManifest-method. Then it will continue by doing a more extensive verification of your service class, that it exists and that it is a subclass of GCMBaseIntentService. The code should be added like this:
{{{
GCMRegistrar.checkDevice(this);
GCMUtils.checkExtended(this);
}}}
There is no need to call GCMRegistrar.checkManifest again, since this is done by GCMUtils for you. When you are installing the app on real devices (not in development mode) you should only include the GCMRegistrart.checkDevice method.
 
=== 2.2 Registration id handling ===
By default GCM does not provide support for handling the registration id, which needs to be sent from the Android client to the server. GCMUtils adds support for automatic registration id handling. This can be done in a number of ways, depending on your requirements.

==== 2.2.1 Automatic registration id request ====
{{{
GCMUtils.createRegSender(String receiverUrl, String regId).send();
}}}
or
{{{
GCMUtils.createRegSender(Context context, String regId).send();
}}}
Both of these methods will create a GCMSender instance for you. With the first method (taking two Strings) it will send it to the receiverUrl you specify. When providing the Context it will read the gcmutils.properties (placed in the assets folder) where you need to specify the _receiver-url_ property.
This method should be used where you receive the registration id from GCM. Typically this will be in the onCreate method:
{{{
String regId = GCMRegistrar.getRegistrationId(this);
if (regId.equals(""))
  GCMRegistrar.register(this, SENDER_ID);

GCMUtils.createRegSender(Context context, String regId).send();
}}}
and in the onRegistered method:
{{{
@Override
protected void onRegistered(Context context, String regId) {
  GCMUtils.createRegSender(GCMUtilsProperties.GCMUTILS.getReceiverUrl(), regId).send();
}
}}}
If you only want to send the registration id and not any other request parameters, you can also use the getAndSendRegistrationId method. This will handle the registration id process for you (no need to manually call GCMRegistrar.register, just add the following code:
{{{
GCMUtils.getAndSendRegistrationId(context);
}}}
or
{{{
GCMUtils.getAndSendRegistrationId(context, callback)
}}}
The callback variable (GCMSenderCallback) is an interface that will be called when the request has been sent. This is where you can add your own implementation to get the status of the request sent.

The getAndSendRegistrationId-method is especially useful combined with the GCMUtilsBaseIntentService class, see section # for more detailed information.

==== 2.2.3 Server receiving the registration id ====
The request sent by the GCMSender is simply sending a POST request containing regId=_registrationId_.
If you are writing your server in Java, you can add the gcm-commons-utils dependency to your project. This contains constants, which means you can read the regId and unregId by doing this:
{{{
String regIdParam = request.getParameter(GCMUtilsConstants.PARAM_KEY_REGID);
                String unregIdParam = request.getParameter(GCMUtilsConstants.PARAM_KEY_UNREGID);
}}}